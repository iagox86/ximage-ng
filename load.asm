bits 32

; Make sure all the registers are invalid memory addresses except for esp
mov eax, 0x41414141
mov ebx, 0x42424242
mov ecx, 0x43434343
mov edx, 0x44444444
mov esi, 0x45454545
mov edi, 0x46464646
mov ebp, 0x47474747


; This is to mess up the stack to prevent popad / [read memory] from accidentally working
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad
pushad

; Re-wind half as many
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad
popad



; Move the registers to the stack so we can read them back
pushad

mov eax, 4
mov ebx, 1
mov ecx, esp
mov edx, 32
int 0x80

popad

; This gets replaced with the code we want to test
db 'XXX'

; This is to prevent stuff that jumps to "just after" the code (like jmp $+4) from accidentally working
jmp do_print

db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc
db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc

do_print:
pushad

mov eax, 4 ; sys_write
mov ebx, 1 ; stdout
mov ecx, esp ; buf
mov edx, 32
int 0x80

popad

mov eax, 1
mov ebx, 0
int 0x80
